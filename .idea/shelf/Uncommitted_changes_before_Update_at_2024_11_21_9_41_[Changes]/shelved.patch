Index: HVACSystem/AirLoop.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from eppy.modeleditor import IDF\r\nfrom HVACSystem.AirLoopComponents import AirLoopComponent\r\nfrom HVACSystem.SetpointManager import SetpointManager\r\nfrom HVACSystem.NodeBranch import NodeBranch\r\nfrom HVACSystem.Controllers import Controller\r\nfrom HVACSystem.ZoneEquipments import ZoneEquipment\r\nfrom Helper import SomeFields\r\nfrom eppy.bunch_subclass import EpBunch\r\n\r\n\r\nclass AirLoop:\r\n    @staticmethod\r\n    def air_loop_hvac(\r\n            idf: IDF,\r\n            name: str = None,\r\n            outdoor_air_stream_comp: dict | list[dict] = None,\r\n            heat_recovery: bool = False,\r\n            supply_branches: list[dict] = None,\r\n            supply_fan: dict = None,\r\n            setpoint_manager: EpBunch = None,\r\n            zones: list[str] | list[EpBunch] = None,\r\n            air_terminal_type: int = 1,\r\n            zone_hvac_type: int = None,\r\n            zone_radiative_type: int = None,\r\n            chilled_water_loop: EpBunch | str = None,\r\n            hot_water_loop: EpBunch | str = None,\r\n            design_supply_air_flow_rate: float = None,\r\n            design_return_air_fraction: float = 1.0,\r\n            sizing: EpBunch = None):\r\n\r\n        loop_assembly = []\r\n        water_clg_coils = []\r\n        water_htg_coils = []\r\n\r\n        # Add water coils from supply branch if available:\r\n        ###############################################################################################\r\n        if supply_branches is not None and len(supply_branches) > 0:\r\n            for item in supply_branches:\r\n                if 'Coil' in item['type'] and 'Water' in item['type']:\r\n                    if 'Cooling' in item['type']:\r\n                        water_clg_coils.append(item['object'])\r\n                        \r\n                    if 'Heating' in item['type']:\r\n                        water_htg_coils.append(item['object'])\r\n\r\n        # Air Loop:\r\n        ###############################################################################################\r\n        name = 'Air Loop' if name is None else name\r\n\r\n        loop = idf.newidfobject('AirLoopHVAC'.upper(), Name=name)\r\n        loop_assembly.append(loop)\r\n\r\n        # Sizing:\r\n        ###############################################################################################\r\n        if sizing is not None:\r\n            sizing['AirLoop_Name'] = name\r\n            loop_assembly.append(sizing)\r\n        else:\r\n            sizing = AirLoopComponent.sizing(idf)\r\n            sizing['AirLoop_Name'] = name\r\n            loop_assembly.append(sizing)\r\n\r\n        # Field Names:\r\n        ###############################################################################################\r\n        fields = SomeFields.a_fields\r\n        flnames = [field.replace(\" \", \"_\") for field in fields]\r\n        # simplify naming\r\n        fields1 = [\r\n            'Controllers',\r\n            'Availability Manager',\r\n            \"Branches\",\r\n            # \"Connectors\",\r\n            \"Supply Inlet Node\",\r\n            \"Demand Outlet Node\",\r\n            \"Demand Inlet Nodes\",\r\n            \"Supply Outlet Nodes\",\r\n        ]\r\n\r\n        fieldnames = [\"%s %s\" % (name, field) for field in fields1]\r\n        for fieldname, thefield in zip(fieldnames, flnames):\r\n            loop[thefield] = fieldname\r\n\r\n        if design_supply_air_flow_rate is not None:\r\n            loop['Design_Supply_Air_Flow_Rate'] = design_supply_air_flow_rate\r\n        else:\r\n            loop['Design_Supply_Air_Flow_Rate'] = 'AutoSize'\r\n        if design_return_air_fraction is not None:\r\n            loop['Design_Return_Air_Flow_Fraction_of_Supply_Air_Flow'] = design_return_air_fraction\r\n\r\n        # Node List:\r\n        ###############################################################################################\r\n        supply_outlet_nodelist_name = f'{name} Supply Outlet Nodes'\r\n        supply_outlet_node_name = supply_outlet_nodelist_name.replace('Nodes', 'Node')\r\n        supply_outlet_nodelist = idf.newidfobject('NodeList'.upper(), Name=supply_outlet_nodelist_name)\r\n        supply_outlet_nodelist['Node_1_Name'] = supply_outlet_node_name\r\n        loop_assembly.append(supply_outlet_nodelist)\r\n\r\n        demand_inlet_nodelist_name = f'{name} Demand Inlet Nodes'\r\n        demand_inlet_node_name = demand_inlet_nodelist_name.replace('Nodes', 'Node')\r\n        demand_inlet_nodelist = idf.newidfobject('NodeList'.upper(), Name=demand_inlet_nodelist_name)\r\n        demand_inlet_nodelist['Node_1_Name'] = demand_inlet_node_name\r\n        loop_assembly.append(demand_inlet_nodelist)\r\n\r\n        # ControllerList if needed:\r\n        ###############################################################################################\r\n        controllers = []\r\n        for comp in supply_branches:\r\n            comp_type = comp['type']\r\n            if 'Coil' in comp_type and 'Water' in comp_type:\r\n                controllers.append(comp['controller'])\r\n\r\n        controller_list_name = f'{name} Controllers'\r\n        controller_list = idf.newidfobject('AirLoopHVAC:ControllerList'.upper(), Name=controller_list_name)\r\n        loop_assembly.append(controller_list)\r\n        for i, controller in enumerate(controllers):\r\n            controller_list[f'Controller_{i + 1}_Object_Type'] = 'Controller:WaterCoil'\r\n            controller_list[f'Controller_{i + 1}_Name'] = controller.Name\r\n            loop_assembly.append(controller)\r\n\r\n        # Availability Manager List:\r\n        ###############################################################################################\r\n        avail_manager_list_name = f'{name} Availability Manager List'\r\n        avail_manager_name = f'{name} Availability Manager'\r\n        avail_manager_list = idf.newidfobject('AvailabilityManagerAssignmentList'.upper(), Name=avail_manager_list_name)\r\n        avail_manager_list['Availability_Manager_1_Object_Type'] = 'AvailabilityManager:Scheduled'\r\n        avail_manager_list['Availability_Manager_1_Name'] = avail_manager_name\r\n        loop_assembly.append(avail_manager_list)\r\n\r\n        avail_manager = idf.newidfobject('AvailabilityManager:Scheduled'.upper(), Name=avail_manager_name)\r\n        avail_manager['Schedule_Name'] = 'Always On Discrete'\r\n        loop_assembly.append(avail_manager)\r\n\r\n        # Outdoor air system\r\n        ###############################################################################################\r\n        # OutdoorAirSystem:\r\n        oa_sys_name = f'{name} Outdoor Air System'\r\n        controller_list_name = f'{oa_sys_name} Controller List'\r\n        equipment_list_name = f'{oa_sys_name} Equipment List'\r\n\r\n        oa_sys = idf.newidfobject('AirLoopHVAC:OutdoorAirSystem'.upper(), Name=oa_sys_name)\r\n        oa_sys['Controller_List_Name'] = controller_list_name\r\n        oa_sys['Outdoor_Air_Equipment_List_Name'] = equipment_list_name\r\n        loop_assembly.append(oa_sys)\r\n\r\n        # Controller List:\r\n        controller_name = f'{oa_sys_name} Controller'\r\n        controller_list = idf.newidfobject('AirLoopHVAC:ControllerList'.upper(), Name=controller_list_name)\r\n        controller_list['Controller_1_Object_Type'] = 'Controller:OutdoorAir'\r\n        controller_list['Controller_1_Name'] = controller_name\r\n        loop_assembly.append(controller_list)\r\n\r\n        # Controller:\r\n        controller = Controller.controller_outdoor_air(idf, controller_name)\r\n        controller['Relief_Air_Outlet_Node_Name'] = f'{controller_name} relief_air_outlet'\r\n        controller['Return_Air_Node_Name'] = f'{controller_name} return_air'\r\n        controller['Mixed_Air_Node_Name'] = f'{controller_name} mixed_air'\r\n        controller['Actuator_Node_Name'] = f'{controller_name} outdoor_air_inlet'\r\n\r\n        oa_inlet_node_list = idf.newidfobject('OutdoorAir:NodeList'.upper())\r\n        oa_inlet_node_list['Node_or_NodeList_Name_1'] = controller.Actuator_Node_Name\r\n\r\n        loop_assembly.append(controller)\r\n\r\n        # Equipment List:\r\n        os_sys_equip_list = idf.newidfobject('AirLoopHVAC:OutdoorAirSystem:EquipmentList'.upper(),\r\n                                             Name=equipment_list_name)\r\n\r\n        mixer_name = f'{oa_sys_name} Outdoor Air Mixer'\r\n        os_sys_equip_list['Component_1_Object_Type'] = 'OutdoorAir:Mixer'\r\n        os_sys_equip_list['Component_1_Name'] = mixer_name\r\n        loop_assembly.append(os_sys_equip_list)\r\n\r\n        mixer_oa_stream_name = controller.Actuator_Node_Name\r\n        mixer_ra_stream_name = controller.Relief_Air_Outlet_Node_Name\r\n\r\n        spm_nodes = []\r\n        fan_inlet_node = None\r\n        fan_outlet_node = None\r\n        if outdoor_air_stream_comp is not None:\r\n            if isinstance(outdoor_air_stream_comp, list) and len(outdoor_air_stream_comp) > 1:\r\n                for i, comp in enumerate(outdoor_air_stream_comp):\r\n                    os_sys_equip_list[f'Component_{i + 2}_Object_Type'] = comp['type']\r\n                    os_sys_equip_list[f'Component_{i + 2}_Name'] = comp['object'].Name\r\n                    if i == 0:\r\n                        comp['object'][comp['air_inlet_field']] = controller.Actuator_Node_Name\r\n                        comp['object'][comp['air_outlet_field']] = comp['object'].Name + '_air_outlet'\r\n                        spm_nodes.append(comp['object'][comp['air_outlet_field']])\r\n                    elif i == len(outdoor_air_stream_comp) - 1:\r\n                        if comp['type'] != 'HeatExchanger:AirToAir:SensibleAndLatent':\r\n                            comp['object'][comp['air_inlet_field']] = outdoor_air_stream_comp[i - 1][\r\n                                'object'].Air_Outlet_Node_Name\r\n                            comp['object'][comp['air_outlet_field']] = comp['object'].Name + '_air_outlet'\r\n\r\n                            mixer_oa_stream_name = comp['object'][comp['air_outlet_field']]\r\n                            spm_nodes.append(comp['object'][comp['air_outlet_field']])\r\n                        else:\r\n                            comp['object'][comp['supply_air_inlet_field']] =\\\r\n                                outdoor_air_stream_comp[i - 1]['object'].Air_Outlet_Node_Name\r\n                            comp['object'][comp['supply_air_outlet_field']] = comp['object'].Name + '_supply_air_outlet'\r\n                            comp['object'][comp['exhaust_air_inlet_field']] = controller.Relief_Air_Outlet_Node_Name\r\n                            comp['object'][comp['exhaust_air_outlet_field']] =\\\r\n                                comp['object'].Name + '_exhaust_air_outlet'\r\n\r\n                            mixer_oa_stream_name = comp['object'][comp['supply_air_outlet_field']]\r\n                            mixer_ra_stream_name = comp['object'][comp['exhaust_air_inlet_field']]\r\n                            spm_nodes.append(comp['object'][comp['supply_air_outlet_field']])\r\n                    else:\r\n                        pass\r\n                    loop_assembly.append(comp['object'])\r\n\r\n            elif isinstance(outdoor_air_stream_comp, dict):\r\n                os_sys_equip_list['Component_2_Object_Type'] = outdoor_air_stream_comp['type']\r\n                os_sys_equip_list['Component_2_Name'] = outdoor_air_stream_comp['object'].Name\r\n\r\n                if outdoor_air_stream_comp['type'] != 'HeatExchanger:AirToAir:SensibleAndLatent':\r\n                    outdoor_air_stream_comp['object'][outdoor_air_stream_comp['air_inlet_field']] = \\\r\n                        controller.Actuator_Node_Name\r\n                    outdoor_air_stream_comp['object'][outdoor_air_stream_comp['air_outlet_field']] = \\\r\n                        outdoor_air_stream_comp['object'].Name + '_air_outlet'\r\n\r\n                    mixer_oa_stream_name = outdoor_air_stream_comp['object'].Air_Outlet_Node_Name\r\n                    spm_nodes.append(outdoor_air_stream_comp['object'][outdoor_air_stream_comp['air_outlet_field']])\r\n                else:\r\n                    outdoor_air_stream_comp['object'][outdoor_air_stream_comp['supply_air_inlet_field']] = \\\r\n                        controller.Actuator_Node_Name\r\n                    outdoor_air_stream_comp['object'][outdoor_air_stream_comp['supply_air_outlet_field']] = \\\r\n                        outdoor_air_stream_comp['object'].Name + '_supply_air_outlet'\r\n                    outdoor_air_stream_comp['object'][outdoor_air_stream_comp['exhaust_air_inlet_field']] = \\\r\n                        controller.Relief_Air_Outlet_Node_Name\r\n                    outdoor_air_stream_comp['object'][outdoor_air_stream_comp['exhaust_air_outlet_field']] = \\\r\n                        outdoor_air_stream_comp['object'].Name + '_exhaust_air_outlet'\r\n\r\n                    mixer_oa_stream_name = \\\r\n                        outdoor_air_stream_comp['object'][outdoor_air_stream_comp['supply_air_outlet_field']]\r\n                    mixer_ra_stream_name = \\\r\n                        outdoor_air_stream_comp['object'][outdoor_air_stream_comp['exhaust_air_inlet_field']]\r\n                    spm_nodes.append(\r\n                        outdoor_air_stream_comp['object'][outdoor_air_stream_comp['supply_air_outlet_field']])\r\n\r\n                loop_assembly.append(outdoor_air_stream_comp['object'])\r\n            else:\r\n                raise TypeError('Invalid type of outdoor air stream components.')\r\n        else:\r\n            if heat_recovery:\r\n                hx_name = f'{oa_sys_name} Heat Exchanger'\r\n                hx = AirLoopComponent.heat_exchanger_air_to_air(idf, hx_name)\r\n                os_sys_equip_list['Component_2_Object_Type'] = hx['type']\r\n                os_sys_equip_list['Component_2_Name'] = hx['object'].Name\r\n\r\n                hx['object'].Supply_Air_Inlet_Node_Name = controller.Actuator_Node_Name\r\n                hx['object'].Supply_Air_Outlet_Node_Name = hx['object'].Name + '_supply_air_outlet'\r\n                hx['object'].Exhaust_Air_Inlet_Node_Name = controller.Relief_Air_Outlet_Node_Name\r\n                hx['object'].Exhaust_Air_Outlet_Node_Name = hx['object'].Name + '_exhaust_air_outlet'\r\n\r\n                mixer_oa_stream_name = hx['object'].Supply_Air_Outlet_Node_Name\r\n                mixer_ra_stream_name = hx['object'].Exhaust_Air_Inlet_Node_Name\r\n                spm_nodes.append(hx['object'].Supply_Air_Outlet_Node_Name)\r\n\r\n                loop_assembly.append(hx['object'])\r\n\r\n        # Outdoor Air Mixer:\r\n        oa_mixer = idf.newidfobject('OutdoorAir:Mixer'.upper(), Name=mixer_name)\r\n        oa_mixer['Mixed_Air_Node_Name'] = controller.Mixed_Air_Node_Name\r\n        oa_mixer['Outdoor_Air_Stream_Node_Name'] = mixer_oa_stream_name\r\n        oa_mixer['Relief_Air_Stream_Node_Name'] = mixer_ra_stream_name\r\n        oa_mixer['Return_Air_Stream_Node_Name'] = controller.Return_Air_Node_Name\r\n        spm_nodes.append(controller.Mixed_Air_Node_Name)\r\n        loop_assembly.append(oa_mixer)\r\n\r\n        # Supply Branch List:\r\n        ###############################################################################################\r\n        if len(supply_branches) > 0:\r\n            # Supply branches:\r\n            ###############################################################################################\r\n            supply_branch_name = f'{name} Main Branch'\r\n            supply_branch = idf.newidfobject(\"BRANCH\", Name=supply_branch_name)\r\n\r\n            if len(supply_branches) <= 1:\r\n                raise ValueError('Supply branches must be more than one')\r\n            else:\r\n                supply_branch['Component_1_Object_Type'] = 'AirLoopHVAC:OutdoorAirSystem'\r\n                supply_branch['Component_1_Name'] = oa_sys_name\r\n                supply_branch['Component_1_Inlet_Node_Name'] = loop['Supply_Side_Inlet_Node_Name']\r\n                supply_branch['Component_1_Outlet_Node_Name'] = controller['Mixed_Air_Node_Name']\r\n\r\n                for i in range(len(supply_branches)):\r\n                    if i == 0:\r\n                        inlet_name = controller['Mixed_Air_Node_Name']\r\n                    else:\r\n                        inlet_name = supply_branches[i-1]['object'][supply_branches[i - 1]['air_outlet_field']]\r\n\r\n                    supply_branch[f'Component_{i + 2}_Object_Type'] = supply_branches[i]['type']\r\n                    supply_branch[f'Component_{i + 2}_Name'] = supply_branches[i]['object'].Name\r\n                    supply_branch[f'Component_{i + 2}_Inlet_Node_Name'] = inlet_name\r\n                    supply_branch[f'Component_{i + 2}_Outlet_Node_Name'] = \\\r\n                        supply_branches[i]['object'][supply_branches[i]['air_outlet_field']]\r\n\r\n                    spm_nodes.append(supply_branch[f'Component_{i + 2}_Outlet_Node_Name'])\r\n\r\n                    # Add Supply Fan at the end:\r\n                    if i == len(supply_branches) - 1:\r\n                        if supply_fan is not None:\r\n                            supply_branch[f'Component_{i + 2}_Outlet_Node_Name'] = \\\r\n                                supply_fan['object'][supply_fan['air_inlet_field']]\r\n                            supply_fan['object'][supply_fan['air_outlet_field']] = supply_outlet_node_name\r\n                            fan_inlet_node = supply_fan['object'][supply_fan['air_inlet_field']]\r\n                            fan_outlet_node = supply_outlet_node_name\r\n\r\n                            # Add fan to branch:\r\n                            fan_index = i + 3\r\n                            supply_branch[f'Component_{fan_index}_Object_Type'] = supply_fan['type']\r\n                            supply_branch[f'Component_{fan_index}_Name'] = supply_fan['object'].Name\r\n                            supply_branch[f'Component_{fan_index}_Inlet_Node_Name'] = fan_inlet_node\r\n                            supply_branch[f'Component_{fan_index}_Outlet_Node_Name'] = fan_outlet_node\r\n\r\n                            loop_assembly.append(supply_fan['object'])\r\n                        else:\r\n                            raise ValueError('Supply fan cannot be None.')\r\n\r\n            loop_assembly.append(supply_branch)\r\n\r\n            # Add setpoint manager to node:\r\n            if setpoint_manager is not None:\r\n                setpoint_manager.Setpoint_Node_or_NodeList_Name = supply_outlet_node_name\r\n\r\n            # Setpoint Manager:MixedAir at each node in outdoor air stream:\r\n            for node in spm_nodes:\r\n                spm_mix = idf.newidfobject('SetpointManager:MixedAir'.upper(), Name=f'{node} SPM')\r\n                spm_mix['Control_Variable'] = 'Temperature'\r\n                spm_mix['Reference_Setpoint_Node_Name'] = supply_outlet_node_name\r\n                spm_mix['Fan_Inlet_Node_Name'] = fan_inlet_node\r\n                spm_mix['Fan_Outlet_Node_Name'] = fan_outlet_node\r\n                spm_mix['Setpoint_Node_or_NodeList_Name'] = node\r\n                loop_assembly.append(spm_mix)\r\n\r\n            # Branch List:\r\n            branch_list = NodeBranch.branch_list(\r\n                idf,\r\n                name=loop.Branch_List_Name,\r\n                branches=[supply_branch])\r\n            loop_assembly.append(branch_list)\r\n\r\n        # Zone Equipment List:\r\n        ###############################################################################################\r\n        zone_equips = ZoneEquipment.zone_equipment_group(\r\n            idf,\r\n            zones=zones,\r\n            air_terminal_type=air_terminal_type,\r\n            zone_hvac_type=zone_hvac_type,\r\n            zone_radiative_type=zone_radiative_type)\r\n        loop_assembly.extend(zone_equips['Equipments'])\r\n\r\n        zone_splitter_nodes = zone_equips['Zone_Splitter_Nodes']\r\n        zone_mixer_nodes = zone_equips['Zone_Mixer_Nodes']\r\n        water_clg_coils.extend(zone_equips['Cooling_Coils'])\r\n        water_htg_coils.extend(zone_equips['Heating_Coils'])\r\n\r\n        # Supply / Return Path:\r\n        ###############################################################################################\r\n        # Supply Path:\r\n        supply_path_name = f'{name} Supply Path'\r\n        zone_splitter_name = f'{name} Zone Splitter'\r\n        supply_path = idf.newidfobject('AirLoopHVAC:SupplyPath'.upper(), Name=supply_path_name)\r\n        supply_path['Supply_Air_Path_Inlet_Node_Name'] = demand_inlet_node_name\r\n        supply_path['Component_1_Object_Type'] = 'AirLoopHVAC:ZoneSplitter'\r\n        supply_path['Component_1_Name'] = zone_splitter_name\r\n        loop_assembly.append(supply_path)\r\n\r\n        # Zone Splitter:\r\n        zone_splitter = idf.newidfobject('AirLoopHVAC:ZoneSplitter'.upper(), Name=zone_splitter_name)\r\n        zone_splitter['Inlet_Node_Name'] = demand_inlet_node_name\r\n        if len(zone_splitter_nodes) > 0:\r\n            for i, node in enumerate(zone_splitter_nodes):\r\n                zone_splitter[f'Outlet_{i+1}_Node_Name'] = node\r\n        loop_assembly.append(zone_splitter)\r\n\r\n        # Return Path:\r\n        return_path_name = f'{name} Return Path'\r\n        zone_mixer_name = f'{name} Zone Mixer'\r\n        return_path = idf.newidfobject('AirLoopHVAC:ReturnPath'.upper(), Name=return_path_name)\r\n        return_path['Return_Air_Path_Outlet_Node_Name'] = loop.Demand_Side_Outlet_Node_Name\r\n        return_path['Component_1_Object_Type'] = 'AirLoopHVAC:ZoneMixer'\r\n        return_path['Component_1_Name'] = zone_mixer_name\r\n        loop_assembly.append(return_path)\r\n\r\n        # Zone Mixer:\r\n        zone_mixer = idf.newidfobject('AirLoopHVAC:ZoneMixer'.upper(), Name=zone_mixer_name)\r\n        zone_mixer['Outlet_Node_Name'] = loop.Demand_Side_Outlet_Node_Name\r\n        if len(zone_mixer_nodes) > 0:\r\n            for i, node in enumerate(zone_mixer_nodes):\r\n                zone_mixer[f'Inlet_{i+1}_Node_Name'] = node\r\n        loop_assembly.append(zone_mixer)\r\n\r\n        # Get all water coils:\r\n        ###############################################################################################\r\n        for item in supply_branches:\r\n            if 'WATER' in item['type'].upper():\r\n                category = item['type'].split(':')[1]\r\n                if category == 'COOLING':\r\n                    water_clg_coils.append(item)\r\n                if category == 'HEATING':\r\n                    water_htg_coils.append(item)\r\n                else:\r\n                    pass\r\n\r\n        output_assembly = {\r\n            'Loop': loop_assembly,\r\n            'Cooling_Coils': water_clg_coils,\r\n            'Heating_Coils': water_htg_coils,\r\n        }\r\n\r\n        return output_assembly\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HVACSystem/AirLoop.py b/HVACSystem/AirLoop.py
--- a/HVACSystem/AirLoop.py	(revision 6642f01e8f03c96b00331913e71a6e450878fbb5)
+++ b/HVACSystem/AirLoop.py	(date 1732093042201)
@@ -39,7 +39,7 @@
                 if 'Coil' in item['type'] and 'Water' in item['type']:
                     if 'Cooling' in item['type']:
                         water_clg_coils.append(item['object'])
-                        
+
                     if 'Heating' in item['type']:
                         water_htg_coils.append(item['object'])
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"009ee414-4448-4ab2-b5b3-780bb7699745\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/EnergyPlus_Modeling_Python.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/EnergyPlus_Modeling_Python.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/HVACSystem/AirLoop.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/HVACSystem/AirLoop.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/HVACSystem/AirLoopComponents.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/HVACSystem/AirLoopComponents.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2npXZz5H23V2yzj0mI2jWwqhTCo\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"EP_Modeling\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"Tox\" factoryName=\"Tox\">\r\n      <module name=\"EP_Modeling\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docs\" factoryName=\"Docutils task\">\r\n      <module name=\"EP_Modeling\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"docutils_input_file\" value=\"\" />\r\n      <option name=\"docutils_output_file\" value=\"\" />\r\n      <option name=\"docutils_params\" value=\"\" />\r\n      <option name=\"docutils_task\" value=\"\" />\r\n      <option name=\"docutils_open_in_browser\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docs\" factoryName=\"Sphinx task\">\r\n      <module name=\"EP_Modeling\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"docutils_input_file\" value=\"\" />\r\n      <option name=\"docutils_output_file\" value=\"\" />\r\n      <option name=\"docutils_params\" value=\"\" />\r\n      <option name=\"docutils_task\" value=\"\" />\r\n      <option name=\"docutils_open_in_browser\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"tests\" factoryName=\"Autodetect\">\r\n      <module name=\"EP_Modeling\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"_new_additionalArguments\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_target\" value=\"&quot;&quot;\" />\r\n      <option name=\"_new_targetType\" value=\"&quot;PATH&quot;\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"tests\" factoryName=\"Doctests\">\r\n      <module name=\"EP_Modeling\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"\" />\r\n      <option name=\"CLASS_NAME\" value=\"\" />\r\n      <option name=\"METHOD_NAME\" value=\"\" />\r\n      <option name=\"FOLDER_NAME\" value=\"\" />\r\n      <option name=\"TEST_TYPE\" value=\"TEST_SCRIPT\" />\r\n      <option name=\"PATTERN\" value=\"\" />\r\n      <option name=\"USE_PATTERN\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"009ee414-4448-4ab2-b5b3-780bb7699745\" name=\"Changes\" comment=\"\" />\r\n      <created>1729671051118</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729671051118</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6642f01e8f03c96b00331913e71a6e450878fbb5)
+++ b/.idea/workspace.xml	(date 1732153285483)
@@ -5,12 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="009ee414-4448-4ab2-b5b3-780bb7699745" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/.idea/EnergyPlus_Modeling_Python.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/EnergyPlus_Modeling_Python.iml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/HVACSystem/AirLoop.py" beforeDir="false" afterPath="$PROJECT_DIR$/HVACSystem/AirLoop.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/HVACSystem/AirLoopComponents.py" beforeDir="false" afterPath="$PROJECT_DIR$/HVACSystem/AirLoopComponents.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/test.py" beforeDir="false" afterPath="$PROJECT_DIR$/test.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
